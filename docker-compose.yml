version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: dev-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product_catalog
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5436:5432'
    networks:
      - dev-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    container_name: dev-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1G -Xmx1G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - dev-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: dev-zookeeper
    user: "0:0"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - dev-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: dev-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '9092:9092'
    networks:
      - dev-network

  product-list-consumer:
    build:
      context: ./product-list-consumer
      dockerfile: Dockerfile
    container_name: product-list-consumer
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_GROUP_ID=product-list-consumer
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "4001:3000"
    networks:
      - dev-network

  product-search:
    build:
      context: ./product-search
      dockerfile: Dockerfile
    container_name: product-search
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=product-search-consumer
      - KAFKA_GROUP_ID=product-search-consumer
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "4002:3000"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
        interval: 10s
        timeout: 5s
        retries: 3
    networks:
      - dev-network

  product-search-consumer:
    build:
      context: ./product-search-consumer
      dockerfile: Dockerfile
    container_name: product-search-consumer
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_GROUP_ID=product-search-consumer
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "4003:3000"
    networks:
      - dev-network

  products:
    build:
      context: ./products
      dockerfile: Dockerfile
    container_name: products
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=product_catalog
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=products-list-consumer
      - KAFKA_GROUP_ID=product-consumer
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "4004:3000"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
        interval: 10s
        timeout: 5s
        retries: 3
    networks:
      - dev-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      products:
        condition: service_started
      product-search:
        condition: service_started

    ports:
      - "8080:80"  # Expose NGINX on host port 8080
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  pgdata:
  esdata:
  zookeeper-data:
  zookeeper-log:
